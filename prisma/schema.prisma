// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String   @map("full_name")
  rol       String   @default("EMPLEADO") // ADMIN o EMPLEADO
  activo    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  ventas            Venta[]
  sesionesVenta     SesionVenta[]
  movimientosCaja   MovimientoCaja[]
  usuarioPermisos   UsuarioPermiso[]

  @@map("usuarios")
}

model Permiso {
  id          Int    @id @default(autoincrement())
  key         String @unique // productos:ver, ventas:crear, etc.
  name        String
  description String
  module      String // productos, ventas, caja, etc.

  // Relaciones
  usuarioPermisos UsuarioPermiso[]

  @@map("permisos")
}

model UsuarioPermiso {
  id         Int @id @default(autoincrement())
  usuarioId  Int @map("usuario_id")
  permisoId  Int @map("permiso_id")

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  permiso Permiso @relation(fields: [permisoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, permisoId])
  @@map("usuario_permisos")
}

model Categoria {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  activa      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  productos Producto[]

  @@map("categorias")
}

model Proveedor {
  id        Int      @id @default(autoincrement())
  nombre    String
  contacto  String?
  telefono  String?
  email     String?
  direccion String?
  activo    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  productos Producto[]

  @@map("proveedores")
}

model Producto {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String?
  codigoBarras  String?  @unique @map("codigo_barras")
  precioCosto   Decimal  @map("precio_costo") @db.Decimal(10, 2)
  precioVenta   Decimal  @map("precio_venta") @db.Decimal(10, 2)
  stock         Int      @default(0)
  stockMinimo   Int      @default(0) @map("stock_minimo")
  activo        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relaciones opcionales
  categoriaId   Int?      @map("categoria_id")
  categoria     Categoria? @relation(fields: [categoriaId], references: [id])
  
  proveedorId   Int?      @map("proveedor_id") 
  proveedor     Proveedor? @relation(fields: [proveedorId], references: [id])

  // Relaciones
  ventaProductos       VentaProducto[]
  movimientosInventario MovimientoInventario[]

  @@map("productos")
}

model SesionVenta {
  id              Int      @id @default(autoincrement())
  usuarioId       Int      @map("usuario_id")
  fechaInicio     DateTime @default(now()) @map("fecha_inicio")
  fechaCierre     DateTime? @map("fecha_cierre")
  montoInicial    Decimal  @default(0) @map("monto_inicial") @db.Decimal(10, 2)
  montoFinal      Decimal? @map("monto_final") @db.Decimal(10, 2)
  totalVentas     Decimal  @default(0) @map("total_ventas") @db.Decimal(10, 2)
  totalCobrado    Decimal  @default(0) @map("total_cobrado") @db.Decimal(10, 2)
  totalEfectivo   Decimal  @default(0) @map("total_efectivo") @db.Decimal(10, 2)
  totalTarjeta    Decimal  @default(0) @map("total_tarjeta") @db.Decimal(10, 2)
  totalTransferencia Decimal @default(0) @map("total_transferencia") @db.Decimal(10, 2)
  estado          String   @default("ABIERTA") // ABIERTA, CERRADA
  observaciones   String?

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  ventas  Venta[]

  @@map("sesiones_venta")
}

model Venta {
  id          Int      @id @default(autoincrement())
  numero      String   @unique // NÃºmero de factura/ticket
  usuarioId   Int      @map("usuario_id")
  sesionId    Int      @map("sesion_id")
  fecha       DateTime @default(now())
  subtotal    Decimal  @db.Decimal(10, 2)
  descuento   Decimal  @default(0) @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  metodoPago  String   @map("metodo_pago") // EFECTIVO, TARJETA, TRANSFERENCIA, MIXTO
  montoPagado Decimal  @map("monto_pagado") @db.Decimal(10, 2)
  cambio      Decimal  @default(0) @db.Decimal(10, 2)
  estado      String   @default("COMPLETADA") // COMPLETADA, CANCELADA
  observaciones String?

  // Relaciones
  usuario         Usuario         @relation(fields: [usuarioId], references: [id])
  sesion          SesionVenta     @relation(fields: [sesionId], references: [id])
  productos       VentaProducto[]
  movimientosCaja MovimientoCaja[]

  @@map("ventas")
}

model VentaProducto {
  id         Int     @id @default(autoincrement())
  ventaId    Int     @map("venta_id")
  productoId Int     @map("producto_id")
  cantidad   Int
  precio     Decimal @db.Decimal(10, 2) // Precio al momento de la venta
  subtotal   Decimal @db.Decimal(10, 2)

  // Relaciones
  venta    Venta    @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  producto Producto @relation(fields: [productoId], references: [id])

  @@map("venta_productos")
}

model MovimientoCaja {
  id          Int      @id @default(autoincrement())
  tipo        String   // ENTRADA, SALIDA, VENTA
  monto       Decimal  @db.Decimal(10, 2)
  descripcion String
  fecha       DateTime @default(now())
  usuarioId   Int      @map("usuario_id")
  ventaId     Int?     @map("venta_id") // Solo si es por venta

  // Relaciones
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  venta   Venta?  @relation(fields: [ventaId], references: [id])

  @@map("movimientos_caja")
}

model MovimientoInventario {
  id          Int      @id @default(autoincrement())
  productoId  Int      @map("producto_id")
  tipo        String   // ENTRADA, SALIDA, AJUSTE
  cantidad    Int      // Puede ser negativo para salidas
  motivo      String
  fecha       DateTime @default(now())
  usuarioId   Int      @map("usuario_id")
  observaciones String?

  // Relaciones
  producto Producto @relation(fields: [productoId], references: [id])

  @@map("movimientos_inventario")
}